I'm not 100% sure about the answer to this question.

That said, I have a guess:

In 1.1.5's discussion of the difference between applicative order vs. normal order, there is a reference to 1-5's code snippet. Namely:

> (See exercise 1.5 for an instance of an "illegitimate" value where normal order and applicative order evaluation do not give the same result.)

I interpret 'illegitimate' here to mean that

```scheme
(define (p) (p))
```

is nonsense.

I certainly can't figure out what it means, and results from the REPL are mystifying.

That said, if the interpreter evaluates in applicative order, then there won't be a problem, as there won't be a need to try to evaluate `(p)` given that the conditional is true. However, if the interpreter evaluates in normal order, then the program will crash on trying to interpretate `(p)`.

I supply a code-snippet that demonstrates this.

(At least, I think so. If I run just `(p)`, the REPL hangs. However, if I run a stupid `(if...(p))`, then I get the same return value as `(test 1 (p))`. This suggests that the return value is an error code of sorts that's related to the hanging--and that `(p)` is a bad expression that's only problematic in normal order evaluations or applicative order evaluation that has to evaluate the bad expression.)
